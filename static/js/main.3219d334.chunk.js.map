{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["liff","init","liffId","sendAlertIfNotInClient","console","log","App","useState","QRtxt","setQRtxt","scanCount","setScanCount","className","Button","variant","onClick","isInClient","scanCode","then","result","JSON","stringify","value","catch","err","color","Message","sendMessages","closeWindow","error","window","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAMAA,IAAKC,KAAK,CACRC,OAAQ,wBAGV,IAAMC,EAAyB,WAAQC,QAAQC,IAAI,2BA6DpCC,MA3Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,mBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAwBb,OACE,qBAAKC,UAAU,MAAf,SACE,iCAEE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAaC,QAxBhB,WACjBJ,EAAaD,EAAY,GACpBV,IAAKgB,aAGJhB,IAAKiB,UACLjB,IAAKiB,WAAWC,MAAK,SAAAC,GAESC,KAAKC,UAAUF,GACzCV,EAASU,EAAOG,OA9BKlB,QAAQC,IAAI,yBAiClCkB,OAAM,SAAAC,GACLf,EAAS,OAVjBN,KAqBE,0BACA,qBAAIS,UAAU,QAAd,cAAyBJ,EAAzB,OACEA,GACA,cAACK,EAAA,EAAD,CACEC,QAAQ,YACRW,MAAM,UACNV,QAAS,kBAjDMW,EAiDkBlB,OAhDtCR,IAAKgB,aAGNhB,IAAK2B,aAAa,CAAC,CACf,KAAQ,OACR,KAAQD,KACRR,MAAK,WACPlB,IAAK4B,iBACJL,OAAM,SAASM,GACdC,OAAOC,MAAM,0BAA4BF,MAR/C1B,KAFsB,IAACuB,GA8CjB,gCC/CKM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.3219d334.chunk.js","sourcesContent":["import './App.css';\nimport {useState} from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport liff from '@line/liff';\n\nliff.init({ \n  liffId: '1655180874-rpzb2gR5'\n});\n\nconst sendAlertIfNotInClient = () => { console.log('sendAlertIfNotInClient') }\nconst toggleQrCodeReader = () => { console.log('toggleQrCodeReader') }\n\nconst sendMessageButton = (Message) => {\n  if (!liff.isInClient()) {\n    sendAlertIfNotInClient();\n  } else {\n      liff.sendMessages([{\n          'type': 'text',\n          'text': Message\n      }]).then(function() {\n        liff.closeWindow();\n      }).catch(function(error) {\n          window.alert('Error sending message: ' + error);\n      });\n  }\n}\n\nfunction App() {\n  const [QRtxt, setQRtxt] = useState('');\n  const [scanCount, setScanCount] = useState(0);\n\n  const scanQRCode = () => {\n    setScanCount(scanCount + 1)\n    if (!liff.isInClient()) {\n      sendAlertIfNotInClient();\n    } else {\n      if (liff.scanCode) {\n          liff.scanCode().then(result => {\n              // e.g. result = { value: \"Hello LIFF app!\" }\n              const stringifiedResult = JSON.stringify(result);\n              setQRtxt(result.value);\n              // document.getElementById('scanQrField').textContent = stringifiedResult;\n              toggleQrCodeReader();\n          }).catch(err => {\n              setQRtxt('')\n              // document.getElementById('scanQrField').textContent = \"scanCode failed!\";\n          });\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <main>\n        {/* <div id=\"scanQrField\" ></div> */}\n        <Button variant=\"contained\"  onClick={scanQRCode} >Scan QR Code</Button>\n        <h2 className=\"QRtxt\" > {QRtxt} </h2>\n        { QRtxt && (\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onClick={() => sendMessageButton(QRtxt)}> \n            Send Message\n          </Button>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
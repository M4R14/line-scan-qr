{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["liff","init","liffId","sendAlertIfNotInClient","console","log","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","useState","QRtxt","setQRtxt","scanCount","setScanCount","scanQRCode","isInClient","scanCode","then","result","stringifiedResult","JSON","stringify","value","document","getElementById","textContent","catch","err","className","id","Button","variant","onClick","Typography","gutterBottom","Message","sendMessages","closeWindow","error","window","alert","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"iRAUAA,IAAKC,KAAK,CAAEC,OAAQ,wBAEpB,IAAMC,EAAyB,WAAQC,QAAQC,IAAI,2BAmBjCC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,UAAW,SACXC,MAAOP,EAAMQ,QAAQC,KAAKC,eAiDfC,MA7Cf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,mBAAS,GAF9B,mBAENG,EAFM,KAEKC,EAFL,KAIPC,EAAa,WACZxB,IAAKyB,aAGJzB,IAAK0B,UACL1B,IAAK0B,WAAWC,MAAK,SAAAC,GAEjB,IAAMC,EAAoBC,KAAKC,UAAUH,GACzCP,EAASO,EAAOI,OAChBC,SAASC,eAAe,eAAeC,YAAcN,EA1ChCzB,QAAQC,IAAI,sBA4CjCkB,EAAa,MACda,OAAM,SAAAC,GACLhB,EAAS,IACTY,SAASC,eAAe,eAAeC,YAAc,sBAZ7DhC,KAsBJ,OAJiB,GAAbmB,GACFE,IAIA,sBAAKc,UAAU,MAAf,UACE,qBAAKC,GAAG,gBACR,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASlB,EAArC,0BACA,cAACmB,EAAA,EAAD,CAAYF,QAAQ,KAAKG,cAAY,EAArC,SAAwCxB,IACtCA,GACA,cAACoB,EAAA,EAAD,CACEC,QAAQ,YACR3B,MAAM,UACN4B,QAAS,kBAhEQG,EAgEgBzB,OA/DpCpB,IAAKyB,aAGNzB,IAAK8C,aAAa,CAAC,CACf,KAAQ,OACR,KAAQD,KACRlB,MAAK,WACP3B,IAAK+C,iBACJX,OAAM,SAASY,GACdC,OAAOC,MAAM,0BAA4BF,MAR/C7C,KAFsB,IAAC0C,GA6DnB,yBChEOM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BiB,M","file":"static/js/main.f8e7f1a2.chunk.js","sourcesContent":["// import logo from './logo.svg';\nimport './App.css';\nimport {useState} from 'react';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport liff from '@line/liff';\n\nliff.init({ liffId: '1655180874-rpzb2gR5' });\n\nconst sendAlertIfNotInClient = () => { console.log('sendAlertIfNotInClient') }\nconst toggleQrCodeReader = () => { console.log('toggleQrCodeReader') }\n\nconst sendMessageButton = (Message) => {\n  if (!liff.isInClient()) {\n    sendAlertIfNotInClient();\n  } else {\n      liff.sendMessages([{\n          'type': 'text',\n          'text': Message\n      }]).then(function() {\n        liff.closeWindow();\n      }).catch(function(error) {\n          window.alert('Error sending message: ' + error);\n      });\n  }\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  const [QRtxt, setQRtxt] = useState('');\n  const [scanCount, setScanCount] = useState(0);\n\n  const scanQRCode = () => {\n    if (!liff.isInClient()) {\n      sendAlertIfNotInClient();\n    } else {\n      if (liff.scanCode) {\n          liff.scanCode().then(result => {\n              // e.g. result = { value: \"Hello LIFF app!\" }\n              const stringifiedResult = JSON.stringify(result);\n              setQRtxt(result.value);\n              document.getElementById('scanQrField').textContent = stringifiedResult;\n              toggleQrCodeReader();\n              setScanCount(1)\n          }).catch(err => {\n              setQRtxt('')\n              document.getElementById('scanQrField').textContent = \"scanCode failed!\";\n          });\n      }\n    }\n  }\n\n  if (scanCount == 0) {\n    scanQRCode()\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"scanQrField\" ></div>\n      <Button variant=\"contained\" onClick={scanQRCode} >Scan QR Code</Button>\n      <Typography variant=\"h4\" gutterBottom >{QRtxt}</Typography>\n      { QRtxt && (\n        <Button \n          variant=\"contained\" \n          color=\"primary\" \n          onClick={() => sendMessageButton(QRtxt)}> \n          Primary \n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}